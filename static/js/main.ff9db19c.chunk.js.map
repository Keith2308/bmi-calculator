{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","getBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","prevState","height","weight","heighToMeter","bmi","Math","round","inches","heightToInches","parseInt","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff9db19c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = (props) => {\n  const { name, type, title, value, onChange } = props;\n\n  return (\n    <div className=\"input-groups\">\n      <span className=\"label\">{title}</span>\n      <div className=\"range-container\">\n        <input\n          type={type}\n          name={name}\n          className=\"range-input\"\n          value={value}\n          onChange={onChange}\n          autoComplete=\"false\"\n        />\n      </div>\n    </div>\n  );\n};\n\nFormInput.propTypes = {\n  title: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\"text\", \"password\", \"number\"]),\n};\n\nexport default FormInput;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport FormInput from \"./FormInput\";\n\nconst BmiCalculator = ({ getBmiValue }) => {\n  const [heightUnit, setHeightUnit] = useState(\"cm\");\n  const [weightUnit, setWeightUnit] = useState(\"kg\");\n  const [unit, setUnit] = useState(\"Metric\");\n  const [count, setCount] = useState({\n    heightCount: \"0\",\n    inchesCount: \"0\",\n    weightCount: \"0\",\n  });\n\n  const { heightCount, weightCount, inchesCount } = count;\n\n  useEffect(() => {\n    metricBMI(heightCount, weightCount);\n    imperialBMI(heightCount, weightCount, inchesCount);\n\n    // eslint-disable-next-line\n  }, [heightCount, weightCount]);\n\n  const onChangeInput = (e) => {\n    const { name, value } = e.target;\n\n    setCount((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const onSelectTag = (e) => {\n    setUnit(e.target.value);\n    if (e.target.value === \"Metric\") {\n      setHeightUnit(\"cm\");\n      setWeightUnit(\"kg\");\n    } else {\n      setHeightUnit(\"ft\");\n      setWeightUnit(\"lbs\");\n    }\n  };\n\n  const resetData = (e) => {\n    e.preventDefault();\n    getBmiValue(0);\n    setUnit(\"Metric\");\n    setCount({\n      heightCount: \"0\",\n      inchesCount: \"0\",\n      weightCount: \"0\",\n    });\n    setHeightUnit(\"cm\");\n    setWeightUnit(\"kg\");\n  };\n\n  const metricBMI = (height, weight) => {\n    if (height > 0 && weight > 0) {\n      const heighToMeter = height / 100;\n      const bmi = weight / (heighToMeter * heighToMeter);\n      getBmiValue(Math.round(bmi));\n    }\n  };\n\n  const imperialBMI = (height, weight, inches) => {\n    if (height > 0 && weight > 0 && inches > 0) {\n      const heightToInches = height * 12 + parseInt(inches);\n      const bmi = 703 * (weight / (heightToInches * heightToInches));\n      getBmiValue(Math.round(bmi));\n    }\n  };\n  return (\n    <>\n      <div className=\"bmi-input\">\n        <div className=\"input-fields\">\n          <div>\n            <span className=\"label-unit\">unit</span>\n            <div className=\"unit\">\n              <select\n                name=\"unit\"\n                value={unit}\n                onChange={onSelectTag}\n                className=\"form-control form-control-sm\"\n              >\n                <option value=\"Metric\">Metric</option>\n                <option value=\"Imperial\">Imperial</option>\n              </select>\n            </div>\n          </div>\n          <FormInput\n            type=\"text\"\n            name=\"heightCount\"\n            title={`Height (${heightUnit})`}\n            value={heightCount}\n            onChange={onChangeInput}\n          />\n          {unit === \"Imperial\" ? (\n            <FormInput\n              type=\"text\"\n              name=\"inchesCount\"\n              title={` (in)`}\n              value={inchesCount}\n              onChange={onChangeInput}\n            />\n          ) : (\n            \"\"\n          )}\n\n          <FormInput\n            type=\"text\"\n            name=\"weightCount\"\n            title={`Weight (${weightUnit})`}\n            value={weightCount}\n            onChange={onChangeInput}\n          />\n        </div>\n        <button className=\"button\" type=\"submit\" onClick={resetData}>\n          Reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nBmiCalculator.propTypes = {\n  getBmiValue: PropTypes.func.isRequired,\n};\n\nexport default BmiCalculator;\n","import React, { useState } from \"react\";\nimport BmiCalculator from \"./BmiCalculator\";\n\nconst BMI = () => {\n  const [bmiValue, setBmiValue] = useState(0);\n\n  const getBmiClass = (bmi) => {\n    if (bmi >= 1 && bmi <= 18.5) return \"Underweight\";\n    if (bmi >= 18.5 && bmi <= 24.9) return \"Normal Weight\";\n    if (bmi >= 24.9 && bmi <= 29.9) return \"Overweight\";\n    if (bmi >= 30) return \"Obese\";\n  };\n\n  const bmiBackgroundColor = (bmi) => {\n    if (bmi >= 1 && bmi <= 18.5) return \"#fed88b\";\n    if (bmi >= 18.5 && bmi <= 24.9) return \"#80ff80\";\n    if (bmi >= 24.9 && bmi <= 29.9) return \"#ff7f50\";\n    if (bmi >= 30) return \"#ff5411\";\n  };\n  const bmiCategory = getBmiClass(bmiValue);\n  let bmiClass = \"\";\n  if (bmiValue > 0 && bmiCategory) {\n    bmiClass = bmiCategory.split(\" \")[0].toLowerCase();\n  }\n  return (\n    <>\n      <div\n        className=\"calculator\"\n        style={{ backgroundColor: bmiBackgroundColor(bmiValue) }}\n      >\n        <h3>Body Mass Index Calculator</h3>\n        <div className=\"bmi-result-container\">\n          <div className=\"bmi-result\">\n            <div className=\"bmi-result-number\">\n              Body Mass Index (BMI) = {bmiValue}\n            </div>\n            <div className={`bmi-category ${bmiClass}`}>{bmiCategory}</div>\n          </div>\n          <BmiCalculator getBmiValue={setBmiValue} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default BMI;\n","import React from \"react\";\nimport \"./App.css\";\nimport BMI from \"./components/BMI\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-6 col-lg-offset-3\">\n          <BMI />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}